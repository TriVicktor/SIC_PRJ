#!/usr/bin/env python
# coding: utf-8

# In[2]:


import time
import cv2
import numpy as np
import socket
from code_detect import detect_and_recognize_plate

PI_HOST = '172.172.29.112'
PI_PORT = 9999


# In[ ]:


def connect_to_pi():
    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        client.connect((PI_HOST, PI_PORT))
        print("[PC] ‚úÖ ƒê√£ k·∫øt n·ªëi t·ªõi Pi.")
        return client
    except Exception as e:
        print("[PC] ‚ùå L·ªói k·∫øt n·ªëi t·ªõi Pi:", e)
        return None

def main():
    cap_laptop = cv2.VideoCapture(0)
    cap_usb = cv2.VideoCapture(1)

    for cap in [cap_laptop, cap_usb]:
        cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
        cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
        cap.set(cv2.CAP_PROP_FPS, 30)

    if not cap_laptop.isOpened() and not cap_usb.isOpened():
        print("[PC] ‚ùå Kh√¥ng m·ªü ƒë∆∞·ª£c b·∫•t k·ª≥ camera n√†o.")
        return

    client = connect_to_pi()
    if client is None:
        return

    client.settimeout(0.5)  # Th·ª≠ nh·∫≠n l·ªánh m·ªói 0.5 gi√¢y
    print("[PC] üü¢ ƒêang ch·ªù l·ªánh t·ª´ Raspberry Pi.")

    while True:
        try:
            # Cho ph√©p nh·∫•n ph√≠m 'q' ƒë·ªÉ tho√°t v√≤ng l·∫∑p
            if cv2.waitKey(1) & 0xFF == ord('q'):
                print("[PC] üëã ƒê√£ nh·∫•n ph√≠m 'q'. Tho√°t ch∆∞∆°ng tr√¨nh.")
                break

            try:
                data = client.recv(1024).decode().strip()
            except socket.timeout:
                continue  # Kh√¥ng c√≥ l·ªánh ‚Üí ti·∫øp t·ª•c v√≤ng l·∫∑p

            if not data:
                continue

            print(f"[PC] üì© Nh·∫≠n l·ªánh t·ª´ Pi: {data}")

            if data == "IR1_ON":
                print("[PC] üîî IR1 b·∫≠t ‚Äì s·ª≠ d·ª•ng camera USB (cam 1)")
                time.sleep(2)
                ret, frame = cap_usb.read()
                if ret:
                    cv2.imwrite("frame_cam1.jpg", frame)
                    plate = detect_and_recognize_plate("frame_cam1.jpg")
                    print("[PC] ‚úÖ Bi·ªÉn s·ªë:", plate)
                    client.sendall(f"PLATE:{plate}".encode())
                else:
                    print("[PC] ‚ùå Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c ·∫£nh t·ª´ cam 1")
                continue

            elif data == "IR2_ON":
                print("[PC] üîî IR2 b·∫≠t ‚Äì s·ª≠ d·ª•ng camera laptop (cam 0)")
                time.sleep(2)
                ret, frame = cap_laptop.read()
                if ret:
                    cv2.imwrite("frame_cam0.jpg", frame)
                    plate = detect_and_recognize_plate("frame_cam0.jpg")
                    print("[PC] ‚úÖ Bi·ªÉn s·ªë:", plate)
                    client.sendall(f"PLATE:{plate}".encode())
                else:
                    print("[PC] ‚ùå Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c ·∫£nh t·ª´ cam 0")
                continue

            elif data == "PROCESS_CAM1":
                print("[PC] üì∑ Live Cam 1 - Nh·∫•n 'c' ƒë·ªÉ ch·ª•p, 'q' ƒë·ªÉ tho√°t")
                while True:
                    ret, frame = cap_usb.read()
                    if ret:
                        cv2.imshow("Cam 1", frame)
                        key = cv2.waitKey(1) & 0xFF
                        if key == ord('c'):
                            cv2.imwrite("frame_cam1.jpg", frame)
                            print("[PC] üì∏ ƒê√£ ch·ª•p ·∫£nh t·ª´ cam 1")
                            break
                        elif key == ord('q'):
                            print("[PC]  ‚ùå H·ªßy ch·ª•p cam 1")
                            client.sendall(b"UNKNOWN")
                            break
                try:
                    cv2.destroyWindow("Cam 1")
                except:
                    pass

                plate = detect_and_recognize_plate("frame_cam1.jpg")
                if plate and plate.strip():
                    client.sendall(plate.strip().upper().encode())
                    print("[PC] ‚úÖ G·ª≠i bi·ªÉn s·ªë:", plate)
                else:
                    print("[PC] ‚ùå Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c bi·ªÉn s·ªë.")
                    client.sendall(b"UNKNOWN")
                continue

            elif data == "PROCESS_CAM0":
                print("[PC] üì∑ Live Cam 0 - Nh·∫•n 'c' ƒë·ªÉ ch·ª•p, 'q' ƒë·ªÉ tho√°t")
                while True:
                    ret, frame = cap_laptop.read()
                    if ret:
                        cv2.imshow("Cam 0", frame)
                        key = cv2.waitKey(1) & 0xFF
                        if key == ord('c'):
                            cv2.imwrite("frame_cam0.jpg", frame)
                            print("[PC] üì∏ ƒê√£ ch·ª•p ·∫£nh t·ª´ cam 0")
                            break
                        elif key == ord('q'):
                            print("[PC] ‚ùå H·ªßy ch·ª•p cam 0")
                            client.sendall(b"UNKNOWN")
                            break
                try:
                    cv2.destroyWindow("Cam 0")
                except:
                    pass

                plate = detect_and_recognize_plate("frame_cam0.jpg")
                if plate and plate.strip():
                    client.sendall(plate.strip().upper().encode())
                    print("[PC] ‚úÖ G·ª≠i bi·ªÉn s·ªë:", plate)
                else:
                    print("[PC] ‚ùå Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c bi·ªÉn s·ªë.")
                    client.sendall(b"UNKNOWN")
                continue

            else:
                print("[PC] X√°c nh·∫≠n l·ªánh:", data)
                continue  # QUAN TR·ªåNG: quay l·∫°i v√≤ng l·∫∑p ƒë·ªÉ ti·∫øp t·ª•c nh·∫≠n l·ªánh

        except Exception as e:
            print("[PC] ‚ùå L·ªói khi x·ª≠ l√Ω l·ªánh:", e)
            break

    # D·ªçn t√†i nguy√™n
    cap_laptop.release()
    cap_usb.release()
    client.close()
    try:
        cv2.destroyAllWindows()
    except:
        pass

if __name__ == "__main__":
    main()

    


# In[ ]:




